# nt2mdl 2.009 beta Nick Holford n.holford@auckland.ac.nz
joint_est_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID: {use=id, type=categorical}
      TIME: {use=idv, type=continuous, units="h"}
      AMT: {use=amt, type=categorical, units="mg"}
      DV: {use=dv, type=continuous}
      DVID: {use=dvid, type=categorical}
      MDV: {use=mdv, type=categorical}
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      file="../data/joint_est.csv"
      inputformat=nonmemFormat
   }# end SOURCE
} # end data object

joint_est_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_KA: {value=0.3}
      POP_V: {value=8}
      POP_K: {value=0.1}
      POP_A1: {value=0.2}
      POP_EMAX: {value=10}
      POP_EC50: {value=1}
      POP_A2: {value=0.5}
      POP_TH1: {value=-2}
      POP_TH2: {value=0.3}
      POP_TH3: {value=1.5}
   }# end STRUCTURAL

   VARIABILITY{
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_V: {value=0, type=VAR, fix=true}
      #SIGMA
      RUV_EPS1: {value=1, type=VAR, fix=true}

   }# end VARIABILITY

} # end of parameter object

joint_est_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID: {type=categorical, level=2, type=subject}
      DV: {type=continuous, level=1, type=observation, prediction=Y}
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_KA
      POP_V
      POP_K
      POP_A1
      POP_EMAX
      POP_EC50
      POP_A2
      POP_TH1
      POP_TH2
      POP_TH3
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_V
      #SIGMA
      RUV_EPS1
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   # ENDGROUP nt2mdl pragma
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_V ~ {type=normal, mean=0, var=PPV_V, level=ID}
      eps_RUV_EPS1 ~ {type=normal, mean=0, var=RUV_EPS1, level=DV}
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

   V=POP_V + eta_PPV_V

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


      ## COMPARTMENTS
      ## 
      ##   
      ##   
      ## #PK:
      ## #DEPOT(TARGET=AD)
      ## #EQUATION:
      ## #DDT_AD=-KA*AD
      ## #DDT_AC=KA*AD - K*AC

   DEQ{
   AD=GUT
   AC=CENTRAL
      GUT: {deriv=-POP_KA*AD}
      CENTRAL: {deriv=POP_KA*AD - POP_K*AC}
   }# end DEQ
   
   CC=CENTRAL/V
   E=POP_EMAX*CC/(POP_EC50 + CC)
   LP1=POP_TH1 + POP_TH2*CC
   LP2=POP_TH1 + POP_TH2*CC + POP_TH3
   #DEFINITION:
   #CONCENTRATION={DISTRIBUTION=LOGNORMAL, PREDICTION=CC, SD=A1}
   #EFFECT={DISTRIBUTION=NORMAL, PREDICTION=E, SD=A2}
   # CUMP1=P(Y<=1)=P1, CUMP2=P(Y<=2)=P1+P2# CUMP3=P(Y<=3)=1
     CUMP1=1/(1+exp(-LP1))
     CUMP2=1/(1+exp(-LP2))
   # EXIT IF THE PROBABILITIES ARE NOT ORDERED CORRECTLY
   #  if (CUMP1>CUMP2) errorExit(1,101) 
   #LEVEL={TYPE=CATEGORICAL, CATEGORIES={1,2,3},
   #        LOGIT(P(LEVEL<=1))=LP1
   #         LOGIT(P(LEVEL<=2))=LP2 }
     P1=CUMP1
     P2=CUMP2-CUMP1
     P3=1-CUMP2
   }# end MODEL_PREDICTION

   ESTIMATION{
# The ESTIMATION block is used when the model is used for parameter estimation.
# Whether estimation or simulation is performed is determined by the task which uses the model.
# The likelihood for a particular DV is calculated e.g. from the model prediction of the concentration and a residual error model.
# There may be more than one type of prediction which may be selected depending on an input variable such as DVID.

      Y: {type=continuous,prediction=CC,ruv=CC*exp(POP_A1*eps_RUV_EPS1)-CC} when (DVID<=1);
      Y: {type=continuous,prediction=E,ruv=POP_A2*eps_RUV_EPS1} when (DVID==2);
      Y: {type=likelihood,prediction=P1} when (DVID==3 && DV==1);
      Y: {type=likelihood,prediction=P2} when (DVID==3 && DV==2);
      Y: {type=likelihood,prediction=P3} when (DVID==3 && DV==3);
   }# end ESTIMATION

   SIMULATION{
# The SIMULATION block is used to simulate values.
# This may be as simple as adding a simulated residual error to a model variable prediction or it may involve more complex code
# which may modify data variables and create a new data object for a subsequent task.
# Simulated variables may be used to replace variables in data set
# This should be used with care if the target is NONMEM because these
# values will overwrite those in the input data set for subsequent sub-problems
# e.g.  DV~(type=normal, mean=Y, sd=SD))

   runif(2)  when (DVID==3),
   0 when (DVID==0)
      otherwise Y

   }# end SIMULATION


   MODEL_OUTPUT_VARIABLES{
# The MODEL_OUTPUT_VARIABLES block specifies the model variables that may be exported from the model object.
      TIME
      AMT
      DVID
      MDV
      CC
      E
      P1
      P2
      P3
      Y
   }# end MODEL_OUTPUT_VARIABLES

} # end of model object

joint_est_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.

   ESTIMATE {
      target = NMTRAN_CODE
      algo = [ "FOCEI" ]
   } #end ESTIMATE sub block

   MODEL {
      tolrel=9
   }# end MODEL sub-block

}# end of task object

#Modelling object group

joint_est_mog=mog{
	joint_est_dat
	joint_est_par
	joint_est_mdl
	joint_est_task
}

