# nt2mdl 2.009 beta Nick Holford n.holford@auckland.ac.nz
Poisson_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID: {use=id, type=categorical}
      TIME: {use=idv, type=continuous, units="h"}
      CP: {use=covariate, type=continuous}
      DV: {use=dv, type=continuous}
      MDV: {use=mdv, type=categorical}
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      file="../data/count.csv"
      inputformat=nonmemFormat
   }# end SOURCE
} # end data object

Poisson_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_BASECOUNT: {value=10, lo=0}
      POP_BETA: {value=.5, lo=0, hi=10}
   }# end STRUCTURAL

   VARIABILITY{
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_EVENT: {value=0.04, type=VAR}
      #SIGMA

   }# end VARIABILITY

} # end of parameter object

Poisson_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID: {type=categorical, level=2, type=subject}
      DV: {type=continuous, level=1, type=observation, prediction=Y}
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_BASECOUNT
      POP_BETA
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_EVENT
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   # Drug effect
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_EVENT ~ {type=normal, mean=0, var=PPV_EVENT, level=ID}
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

      COUNT=POP_BASECOUNT + POP_BETA*CP + eta_PPV_EVENT
      LDVFAC=lfactorial(DV) when (DV>0)
         otherwise 0

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.

   }# end MODEL_PREDICTION

   ESTIMATION{
# The ESTIMATION block is used when the model is used for parameter estimation.
# Whether estimation or simulation is performed is determined by the task which uses the model.
# The likelihood for a particular DV is calculated e.g. from the model prediction of the concentration and a residual error model.
# There may be more than one type of prediction which may be selected depending on an input variable such as DVID.

      Y: {type=M2LL,prediction=-2*(-COUNT+DV*ln(COUNT)-LDVFAC)}
   }# end ESTIMATION

} # end of model object

Poisson_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.

   ESTIMATE {
      target = NMTRAN_CODE
      algo = [ "FOCE " ]
   } #end ESTIMATE sub block

}# end of task object

#Modelling object group

Poisson_mog=mog{
	Poisson_dat
	Poisson_par
	Poisson_mdl
	Poisson_task
}
