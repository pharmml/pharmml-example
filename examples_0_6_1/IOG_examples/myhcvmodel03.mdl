# nt2mdl 2.009 beta Nick Holford n.holford@auckland.ac.nz
myhcvmodel03_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID: {use=id, type=categorical}
      TIME: {use=idv, type=continuous, units="h"}
      AMT: {use=amt, type=categorical, units="mg"}
      DVX: {use=covariate, type=continuous}
      DV: {use=dv, type=continuous}
      RATE: {use=covariate, type=continuous}
      CMT: {use=cmt, type=categorical, define=[[TC,1],[IC,2],[VL_I,3],[VL_NI,4]]}
      MDV: {use=mdv, type=categorical}
      GENO: {use=covariate, type=continuous}
      AGE: {use=covariate, type=continuous, units="y"}
      SEX: {use=covariate, type=categorical, define=[[female,0],[male,1]]}
      RACE: {use=covariate, type=categorical, define=[[white,1],[black,2],[other,3]]}
      BW: {use=covariate, type=continuous, units="kg"}
      PEG: {use=covariate, type=continuous}
      RBV: {use=covariate, type=continuous}
      DRBV: {use=covariate, type=continuous}
      TEND: {use=covariate, type=continuous}
      CENS: {use=covariate, type=continuous}
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      file="../data/Sim_mlx07.csv"
      inputformat=nonmemFormat
   }# end SOURCE
} # end data object

myhcvmodel03_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_RR0: {value=6, lo=0.1} # basic reproductive number
      POP_P: {value=20, lo=0.1} # virion production rate IU.hepatocyte.day-1
      POP_C: {value=5, lo=0.1} # virion elimination rate constant day-1
      POP_DELTA: {value=0.25, lo=0.001} # infected cell death rate constant day-1
      POP_BETA_DELTA: {value=-0.25, lo=-1, hi=1} # GENO1 covariate effect on delta
      POP_ED50PEG: {value=1, lo=0.001} # ED50 of peginterferon (HCVGN1) mcg.week-1
      POP_BETA_ED50PEG: {value=2, lo=-1, hi=10} # GENO1 covariate effect on ED50peg
      POP_ED50RBV: {value=15, lo=0.01} # ED50 of ribavirin mcg.kg-1.day-1
      POP_K: {value=0.03, lo=0.001, hi=0.2} # antiviral-effect decay constant day-1
      POP_R: {value=0.005, lo=0.000001} # hepatocyte proliferation rate constant day-1
      RUV_SDVL: {value=0.6, lo=0.001} # residual error log10(IU.mL-1)
   }# end STRUCTURAL

   VARIABILITY{
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_RR0: {value=1, type=VAR} # 1
      PPV_P: {value=0, type=VAR, fix=true}
      PPV_C: {value=1, type=VAR} # 1
      PPV_DELTA: {value=0.49, type=VAR} # 0.49=0.7**2
      PPV_ED50PEG: {value=2.25, type=VAR} # 2.25=1.5**2
      PPV_ED50RBV: {value=0, type=VAR, fix=true}
      PPV_K: {value=0, type=VAR, fix=true}
      PPV_R: {value=0, type=VAR, fix=true}
      #SIGMA
      RUV_EPS1: {value= 1, type=VAR, fix=true}

   }# end VARIABILITY

} # end of parameter object

myhcvmodel03_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID: {type=categorical, level=2, type=subject}
      DV: {type=continuous, level=1, type=observation, prediction=Y}
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_RR0
      POP_P
      POP_C
      POP_DELTA
      POP_BETA_DELTA
      POP_ED50PEG
      POP_BETA_ED50PEG
      POP_ED50RBV
      POP_K
      POP_R
      RUV_SDVL
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_RR0
      PPV_P
      PPV_C
      PPV_DELTA
      PPV_ED50PEG
      PPV_ED50RBV
      PPV_K
      PPV_R
      #SIGMA
      RUV_EPS1
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   TCMAX  = 18500000                  when (NEWIND==0);
   DTC    = 1/300                     when (NEWIND==0);
   ICMIN  = 1/13500                   when (NEWIND==0);
   S      = TCMAX*DTC                 when (NEWIND==0);
   LLOQ   = 50                        when (NEWIND==0);
   LN10   = ln(10) 					  when (NEWIND==0);
   L10LLOQ= ln(LLOQ)/LN10             when (NEWIND==0);
   #Group variables
   #Genotype effects
   BDELTA=0 when (GENO!=1)
      otherwise POP_BETA_DELTA
   BED50PEG=0 when (GENO!=1)
      otherwise POP_BETA_ED50PEG
   #MU reference log linearization
   MU_1    =ln(POP_RR0)
   MU_2      =ln(POP_P)
   MU_3      =ln(POP_C)
   MU_4  =ln(POP_DELTA)   + BDELTA
   MU_5=ln(POP_ED50PEG) + BED50PEG
   MU_6=ln(POP_ED50RBV)
   MU_7      =ln(POP_K)
   MU_8      =ln(POP_R)
   #Individual variables
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_RR0 ~ {type=normal, mean=0, var=PPV_RR0, level=ID}
      eta_PPV_P ~ {type=normal, mean=0, var=PPV_P, level=ID}
      eta_PPV_C ~ {type=normal, mean=0, var=PPV_C, level=ID}
      eta_PPV_DELTA ~ {type=normal, mean=0, var=PPV_DELTA, level=ID}
      eta_PPV_ED50PEG ~ {type=normal, mean=0, var=PPV_ED50PEG, level=ID}
      eta_PPV_ED50RBV ~ {type=normal, mean=0, var=PPV_ED50RBV, level=ID}
      eta_PPV_K ~ {type=normal, mean=0, var=PPV_K, level=ID}
      eta_PPV_R ~ {type=normal, mean=0, var=PPV_R, level=ID}
      eps_RUV_EPS1 ~ {type=normal, mean=0, var=RUV_EPS1, level=DV}
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

   RR0    =exp(MU_1     + eta_PPV_RR0)
   VPR    =exp(MU_2       + eta_PPV_P)
   C      =exp(MU_3       + eta_PPV_C)
   DELTA  =exp(MU_4   + eta_PPV_DELTA)
   ED50PEG=exp(MU_5 + eta_PPV_ED50PEG)
   ED50RBV=exp(MU_6 + eta_PPV_ED50RBV)
   K      =exp(MU_7       + eta_PPV_K)
   R      =exp(MU_8       + eta_PPV_R)
   # some variables
   EPSPEG = PEG/(PEG+ED50PEG)
   RHO    = RBV/(RBV+ED50RBV)
   RR0T   = 1 + RR0
   BETA   = RR0T*DELTA*C/(TCMAX*VPR)  # VL IU.mL-1.day-1
   # compute the initial values
   E      = DELTA*RR0T/R
   B      = DELTA*TCMAX/R
   D      = (TCMAX + (DTC*B)/(DELTA*E) - B/E - B) / E
   TC0    = 0.5*(-D + sqrt(D^2 + (4*TCMAX*S)/(R*(E^2))))
   IC0    = TC0*(E-1) + TCMAX - B
   VLI0   = VPR*IC0/C
   VLNI0  = 0
   # Set intital conditions

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


      ## COMPARTMENTS
      ## 
      ##   
      ##   
      ##   
      ##   

   DEQ{
   TC=TC_m
   IC=IC_m
   VLI=VL_I
   VLNI=VL_NI
   # condition on the number of infected cells
   PCOND = 0 when (IC<ICMIN)
      otherwise  VPR
   # inhibition before and after the end of treatment
   COEFF = exp(-K*(T-TEND)) when (T>TEND)
      otherwise  1
   RHOCOND = COEFF*RHO 
   EPSCOND = COEFF*EPSPEG
   # proliferation rate of the cells
   R_PROLIF = R*(1-(TC+IC)/TCMAX)
   DTTC   = S + R_PROLIF*TC - DTC*TC - BETA*TC*VLI
   DTIC   = BETA*TC*VLI + R_PROLIF*IC - DELTA*IC
   DTVLI  = (1-RHOCOND)*(1-EPSCOND)*PCOND*IC - C*VLI
   DTVLNI = RHOCOND*(1-EPSCOND)*PCOND*IC - C*VLNI
   # ODE system
      TC_m: {deriv= DTTC, init= TC0} # TC
      IC_m: {deriv= DTIC , init= IC0} # IC
      VL_I: {deriv= DTVLI , init= VLI0} # VLI
      VL_NI: {deriv= DTVLNI, init= VLNI0} # VLNI
   }# end DEQ
   
   #E suffix because cannot use same variable names in $DES and $ERROR
   TCE=TC_m
   ICE=IC_m
   VLIE=VL_I
   VLNIE=VL_NI
   VL=VLIE + VLNIE
   #OUTPUT1 = log10(max(VL_I+VL_NI, 1))
   VL = 1 when (VL<1);
   L10VL=ln(VL)/LN10
   }# end MODEL_PREDICTION

   ESTIMATION{
# The ESTIMATION block is used when the model is used for parameter estimation.
# Whether estimation or simulation is performed is determined by the task which uses the model.
# The likelihood for a particular DV is calculated e.g. from the model prediction of the concentration and a residual error model.
# There may be more than one type of prediction which may be selected depending on an input variable such as DVID.

      Y: {type=continuous,prediction=L10VL,ruv=RUV_SDVL*eps_RUV_EPS1} when (CENS==0)
         otherwise  {type=likelihood,prediction=pnorm((L10LLOQ-L10VL)/RUV_SDVL) }
   }# end ESTIMATION


   MODEL_OUTPUT_VARIABLES{
# The MODEL_OUTPUT_VARIABLES block specifies the model variables that may be exported from the model object.
      ID
      TIME
      PEG
      RBV
      TCE
      ICE
      VLIE
      VLNIE
      CENS
      VL
      MDV
   }# end MODEL_OUTPUT_VARIABLES

} # end of model object

myhcvmodel03_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.

   ESTIMATE {
      target = NMTRAN_CODE
      algo = [ "SAEM " ]
   } #end ESTIMATE sub block

   MODEL {
      tolrel=6
   }# end MODEL sub-block

#   DATA{
#      DROP: {
#         DVX
#      } # end DROP
#   }# end DATA

}# end of task object

#Modelling object group

myhcvmodel03_mog=mog{
	myhcvmodel03_dat
	myhcvmodel03_par
	myhcvmodel03_mdl
	myhcvmodel03_task
}

